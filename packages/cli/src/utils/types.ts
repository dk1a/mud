import { runTypeChain, glob as typechainGlob } from "typechain";
import glob from "glob";
import { extractIdFromFile } from "./ids";
import { readFileSync, rmSync, writeFileSync } from "fs";
import path from "path";
import { filterAbi, forgeBuild } from "./build";
import { getForgeConfig } from "./config";

export async function generateAbiTypes(
  inputDir: string,
  outputDir: string,
  options?: { clear?: boolean; cwd?: string }
) {
  if (options?.clear) {
    console.log("Clearing typechain output directory", outputDir);
    rmSync(outputDir, { recursive: true, force: true });
  }

  const cwd = options?.cwd ?? process.cwd();

  const allFiles = typechainGlob(cwd, [`${inputDir!}/**/+([a-zA-Z0-9_]).json`]);

  const result = await runTypeChain({
    cwd,
    filesToProcess: allFiles,
    allFiles,
    outDir: outputDir!,
    target: "ethers-v5",
  });

  console.log(`Successfully generated ${result.filesGenerated} files`);
}

export async function generateSystemTypes(outputDir: string, configPath: string) {
  // Parse deploy.json config (to get all the systems)
  const deployConfig = JSON.parse(readFileSync(configPath, { encoding: "utf8" }));
  const systemNames: string[] = deployConfig.systems.map(({ name }: { name: string }) => name);

  // Parse forge config (to get src dir)
  const forgeConfig = await getForgeConfig();

  // Get all .sol files
  const systemFiles = glob
    .sync(path.join(forgeConfig.src, "**/*.sol"))
    // Keep only files that match system names
    .filter((file) => systemNames.includes(path.basename(file, ".sol")));

  // Combine systems data
  const systems = systemFiles.map((file) => {
    // Extract ids from system files
    const id = extractIdFromFile(file);
    if (!id) {
      console.log("Path:", file);
      console.log("ID:", id);
      throw new Error(
        `No ID found for ${file}. Make sure your system source file includes a ID definition (uint256 constant ID = uint256(keccak256(<ID>));)`
      );
    }

    const name = path.basename(file, ".sol");
    return {
      name,
      id,
      abi: `../abi/${name}.json`,
      typePath: `./ethers-contracts/${name}.ts`,
    };
  });

  console.log(
    "System names",
    systems.map(({ name }) => name)
  );
  console.log(
    "System ids",
    systems.map(({ id }) => id)
  );
  console.log(
    "Type paths",
    systems.map(({ typePath }) => typePath)
  );
  console.log(
    "ABIs",
    systems.map(({ abi }) => abi)
  );

  const SystemMappings = `// Autogenerated using mud system-types
export const systemToId = {
${systems.map(({ id, name }) => `  ${name}: "${id}",`).join("\n")}
};

export const idToSystem = {
${systems.map(({ id, name }) => `  "${id}": "${name}",`).join("\n")}
};
`;

  const SystemTypes = `// Autogenerated using mud system-types
${systems.map(({ name, typePath }) => `import { ${name} } from "${typePath.replace(".ts", "")}";`).join("\n")}
 
export type SystemTypes = {
${systems.map(({ id, name }) => `  "${id}": ${name};`).join("\n")}
};
`;

  const SystemAbis = `// Autogenerated using mud system-types
${systems.map(({ name, abi }) => `import ${name} from "${abi}";`).join("\n")}

export const SystemAbis = {
${systems.map(({ id, name }) => `  "${id}": ${name}.abi,`).join("\n")}
};
`;

  console.log("Generating files:");
  console.log("SystemTypes.ts", SystemTypes);
  console.log("SystemAbis.mts", SystemAbis);
  console.log("SystemMappings.ts", SystemMappings);

  writeFileSync(path.join(outputDir, "SystemTypes.ts"), SystemTypes);
  writeFileSync(path.join(outputDir, "SystemAbis.mts"), SystemAbis);
  writeFileSync(path.join(outputDir, "SystemAbis.mjs"), SystemAbis);
  writeFileSync(path.join(outputDir, "SystemMappings.ts"), SystemMappings);
}

/**
 * @param abiDir If not provided, the contracts are built and abis are exported to ./abi
 */
export async function generateTypes(
  configPath: string,
  abiDir?: string,
  outputDir = "./types",
  options?: { clear?: boolean }
) {
  if (!abiDir) {
    console.log("Compiling contracts");
    abiDir = "./abi";
    await forgeBuild(options);
    await filterAbi(abiDir);
  }

  await generateAbiTypes(abiDir, path.join(outputDir, "ethers-contracts"), options);
  await generateSystemTypes(outputDir, configPath);
}
