// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import { console } from "forge-std/console.sol";
import { Slice, toSlice } from "@dk1a/solidity-stringutils/src/Slice.sol";

import { StoreSwitch } from "../StoreSwitch.sol";
import { StoreCore } from "../StoreCore.sol";
import { SchemaType } from "../SchemaType.sol";
import { Pack } from "../Pack.sol";

// -- User defined schema and id --

bytes32 constant id = keccak256("mud.store.table.test");

struct Schema {
  address addr;
  bytes4 selector;
  uint8 executionMode;
  int128 sigInt;
  bytes args;
  uint32[] numbers;
  string aString;
  bool aBool;
}

// -- Autogenerated schema and library --
// TODO: autogenerate

library TestTable {
  /** Get the table's schema */
  function getSchema() internal pure returns (SchemaType[] memory schema) {
    schema = new SchemaType[](8);
    schema[0] = SchemaType.ADDRESS;
    schema[1] = SchemaType.BYTES4;
    schema[2] = SchemaType.UINT8;
    schema[3] = SchemaType.INT128;
    schema[4] = SchemaType.BYTES;
    schema[5] = SchemaType.UINT32_ARRAY;
    schema[6] = SchemaType.STRING;
    schema[7] = SchemaType.BOOL;
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(id, getSchema());
  }

  /** Set the table's data */
  function set(
    bytes32 key,
    address addr,
    bytes4 selector,
    uint8 executionMode,
    int128 sigInt,
    bytes memory args,
    uint32[] memory numbers,
    string memory aString,
    bool aBool
  ) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;

    // TODO also add a separate setStaticData method?

    // set static data
    bytes memory staticData = abi.encodePacked(addr, selector, executionMode, sigInt, aBool);
    StoreSwitch.setStaticData(id, keyTuple, staticData);

    // set dynamic data
    setArgs(key, args);
    setNumbers(key, numbers);
    setAString(key, aString);
  }

  function set(bytes32 key, Schema memory data) internal {
    set(
      key,
      data.addr,
      data.selector,
      data.executionMode,
      data.sigInt,
      data.args,
      data.numbers,
      data.aString,
      data.aBool
    );
  }

  function setAddress(bytes32 key, address addr) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setStaticDataColumn(id, keyTuple, abi.encodePacked(addr), 0);
  }

  function setSelector(bytes32 key, bytes4 selector) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setStaticDataColumn(id, keyTuple, abi.encodePacked(selector), 1);
  }

  function setExecutionMode(bytes32 key, uint8 executionMode) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setStaticDataColumn(id, keyTuple, abi.encodePacked(executionMode), 2);
  }

  function setSigInt(bytes32 key, int128 sigInt) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setStaticDataColumn(id, keyTuple, abi.encodePacked(sigInt), 3);
  }

  function setArgs(bytes32 key, bytes memory args) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setDynamicDataColumn(id, keyTuple, Pack.packBytesSingle(SchemaType.BYTES, bytes(args)), 4);
  }

  function setNumbers(bytes32 key, uint32[] memory numbers) internal {
    bytes32[] memory __genericArray;
    assembly {
      __genericArray := numbers
    }

    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setDynamicDataColumn(id, keyTuple, Pack.packArraySingle(SchemaType.UINT32_ARRAY, __genericArray), 5);
  }

  function setAString(bytes32 key, string memory aString) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setDynamicDataColumn(id, keyTuple, Pack.packBytesSingle(SchemaType.STRING, bytes(aString)), 6);
  }

  function setABool(bytes32 key, bool aBool) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setStaticDataColumn(id, keyTuple, abi.encodePacked(aBool), 7);
  }

  /** Get the table's data */
  function get(bytes32 key) internal view returns (Schema memory result) {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;

    // get static data

    bytes memory data = StoreSwitch.getStaticData(id, keyTuple);
    Slice slice = toSlice(data);
    Slice valueSlice;

    (valueSlice, slice) = slice.splitAt(20);
    result.addr = address(bytes20(valueSlice.toBytes32()));

    (valueSlice, slice) = slice.splitAt(4);
    result.selector = bytes4(valueSlice.toBytes32());

    (valueSlice, slice) = slice.splitAt(1);
    result.executionMode = uint8(bytes1(valueSlice.toBytes32()));

    (valueSlice, slice) = slice.splitAt(16);
    result.sigInt = int128(uint128(bytes16(valueSlice.toBytes32())));

    (valueSlice, slice) = slice.splitAt(1);
    result.aBool = Pack.toBool(valueSlice.toBytes32());

    // get dynamic data
    result.args = getArgs(key);
    result.numbers = getNumbers(key);
    result.aString = getAString(key);

    return result;
  }

  function getArgs(bytes32 key) internal view returns (bytes memory) {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    Slice slice = toSlice(StoreSwitch.getDynamicDataColumn(id, keyTuple, 4));
    return bytes(Pack.unpackBytes(slice, SchemaType.BYTES));
  }

  function getNumbers(bytes32 key) internal view returns (uint32[] memory result) {
    bytes32[] memory __genericArray;

    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    Slice slice = toSlice(StoreSwitch.getDynamicDataColumn(id, keyTuple, 5));
    __genericArray = Pack.unpackArray(slice, SchemaType.UINT32_ARRAY);

    assembly {
      result := __genericArray
    }
  }

  function getAString(bytes32 key) internal view returns (string memory) {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    Slice slice = toSlice(StoreSwitch.getDynamicDataColumn(id, keyTuple, 6));
    return string(Pack.unpackBytes(slice, SchemaType.STRING));
  }
}
