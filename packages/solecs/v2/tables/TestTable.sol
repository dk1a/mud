// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import { console } from "forge-std/console.sol";
import { Slice, toSlice } from "@dk1a/solidity-stringutils/src/Slice.sol";

import { StoreSwitch } from "../StoreSwitch.sol";
import { StoreCore } from "../StoreCore.sol";
import { SchemaType } from "../SchemaType.sol";
import { Pack } from "../Pack.sol";

// -- User defined schema and id --

bytes32 constant id = keccak256("mud.store.table.test");

struct Schema {
  address addr;
  bytes4 selector;
  uint8 executionMode;
  int128 sigInt;
  bytes args;
  uint32[] numbers;
  string aString;
  bool aBool;
}

// -- Autogenerated schema and library --
// TODO: autogenerate

library TestTable {
  /** Get the table's schema */
  function getSchema() internal pure returns (SchemaType[] memory schema) {
    schema = new SchemaType[](8);
    schema[0] = SchemaType.ADDRESS;
    schema[1] = SchemaType.BYTES4;
    schema[2] = SchemaType.UINT8;
    schema[3] = SchemaType.INT128;
    schema[4] = SchemaType.BYTES;
    schema[5] = SchemaType.UINT32_ARRAY;
    schema[6] = SchemaType.STRING;
    schema[7] = SchemaType.BOOL;
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(id, getSchema());
  }

  /** Set the table's data */
  function set(
    bytes32 key,
    address addr,
    bytes4 selector,
    uint8 executionMode,
    int128 sigInt,
    bytes memory args,
    uint32[] memory numbers,
    string memory aString,
    bool aBool
  ) internal {
    bytes32 __genericValue;
    bytes32[] memory __genericArray;

    // TODO static sizes can also be autogenerated
    uint256 packedSize = Pack.packedSize(SchemaType.ADDRESS) +
      Pack.packedSize(SchemaType.BYTES4) +
      Pack.packedSize(SchemaType.UINT8) +
      Pack.packedSize(SchemaType.INT128) +
      Pack.packedBytesSize(SchemaType.BYTES, bytes(args).length) +
      Pack.packedArraySize(SchemaType.UINT32_ARRAY, numbers.length) +
      Pack.packedBytesSize(SchemaType.STRING, bytes(aString).length) +
      Pack.packedSize(SchemaType.BOOL);

    bytes memory data = new bytes(packedSize);
    Slice slice = toSlice(data);
    slice = Pack.packStaticValue(slice, SchemaType.ADDRESS, bytes32(uint256(uint160(addr))));
    slice = Pack.packStaticValue(slice, SchemaType.BYTES4, bytes32(selector));
    slice = Pack.packStaticValue(slice, SchemaType.UINT8, bytes32(uint256(executionMode)));
    slice = Pack.packStaticValue(slice, SchemaType.INT128, bytes32(uint256(int256(sigInt))));
    slice = Pack.packBytes(slice, SchemaType.BYTES, bytes(args));
    assembly {
      __genericArray := numbers
    }
    slice = Pack.packArray(slice, SchemaType.UINT32_ARRAY, __genericArray);
    slice = Pack.packBytes(slice, SchemaType.STRING, bytes(aString));
    assembly {
      __genericValue := aBool
    }
    slice = Pack.packStaticValue(slice, SchemaType.BOOL, __genericValue);

    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;

    StoreSwitch.setData(id, keyTuple, data);
  }

  function set(bytes32 key, Schema memory data) internal {
    set(
      key,
      data.addr,
      data.selector,
      data.executionMode,
      data.sigInt,
      data.args,
      data.numbers,
      data.aString,
      data.aBool
    );
  }

  function setAddress(bytes32 key, address addr) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setData(id, keyTuple, 0, abi.encodePacked(addr));
  }

  function setSelector(bytes32 key, bytes4 selector) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setData(id, keyTuple, 1, abi.encodePacked(selector));
  }

  function setExecutionMode(bytes32 key, uint8 executionMode) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setData(id, keyTuple, 2, abi.encodePacked(executionMode));
  }

  function setSigInt(bytes32 key, int128 sigInt) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setData(id, keyTuple, 3, abi.encodePacked(sigInt));
  }

  function setArgs(bytes32 key, bytes memory args) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setData(id, keyTuple, 4, Pack.packBytesSingle(SchemaType.BYTES, bytes(args)));
  }

  function setNumbers(bytes32 key, uint32[] memory numbers) internal {
    bytes32[] memory __genericArray;
    assembly {
      __genericArray := numbers
    }

    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setData(id, keyTuple, 5, Pack.packArraySingle(SchemaType.UINT32, __genericArray));
  }

  function setAString(bytes32 key, string memory aString) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setData(id, keyTuple, 6, Pack.packBytesSingle(SchemaType.STRING, bytes(aString)));
  }

  function setABool(bytes32 key, bool aBool) internal {
    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    StoreSwitch.setData(id, keyTuple, 7, abi.encodePacked(aBool));
  }

  /** Get the table's data */
  function get(bytes32 key) internal view returns (Schema memory result) {
    bytes32 __genericValue;
    bytes memory __genericBytes;
    bytes32[] memory __genericArray;

    bytes32[] memory keyTuple = new bytes32[](1);
    keyTuple[0] = key;
    bytes memory data = StoreSwitch.getData(id, keyTuple);
    Slice slice = toSlice(data);

    (__genericValue, slice) = Pack.unpackStaticValue(slice, SchemaType.ADDRESS);
    result.addr = address(uint160(uint256(__genericValue)));

    (__genericValue, slice) = Pack.unpackStaticValue(slice, SchemaType.BYTES4);
    result.selector = bytes4(__genericValue);

    (__genericValue, slice) = Pack.unpackStaticValue(slice, SchemaType.UINT8);
    result.executionMode = uint8(uint256(__genericValue));

    (__genericValue, slice) = Pack.unpackStaticValue(slice, SchemaType.INT128);
    result.sigInt = int128(uint128(uint256(__genericValue)));

    (__genericBytes, slice) = Pack.unpackBytes(slice, SchemaType.BYTES);
    result.args = bytes(__genericBytes);

    (__genericArray, slice) = Pack.unpackArray(slice, SchemaType.UINT32_ARRAY);
    // TODO is there a better way to do generic arrays?
    uint32[] memory numbers;
    assembly {
      numbers := __genericArray
    }
    result.numbers = numbers;

    (__genericBytes, slice) = Pack.unpackBytes(slice, SchemaType.STRING);
    result.aString = string(__genericBytes);

    (__genericValue, slice) = Pack.unpackStaticValue(slice, SchemaType.BOOL);
    bool aBool;
    assembly {
      aBool := __genericValue
    }
    result.aBool = aBool;

    return result;
  }
}
