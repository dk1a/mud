// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

import { IStore } from "../IStore.sol";
import { StoreSwitch } from "../StoreSwitch.sol";
import { StoreCore } from "../StoreCore.sol";
import { SchemaType } from "../Types.sol";
import { Bytes } from "../Bytes.sol";
import { SliceLib } from "../Slice.sol";
import { EncodeArray } from "../tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "../Schema.sol";
import { PackedCounter, PackedCounterLib } from "../PackedCounter.sol";

uint256 constant _tableId = uint256(keccak256("/tables/AttackComponent"));
uint256 constant AttackComponentTableId = _tableId;

library AttackComponent {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT32;

    return SchemaLib.encode(_schema);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema());
  }

  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema());
  }

  function set(bytes32 key, uint32 value) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked(value));
  }

  function get(bytes32 key) internal view returns (uint32 value) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return uint32(Bytes.slice4(_blob, 0));
  }
}
