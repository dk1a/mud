// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

import { IStore } from "../IStore.sol";
import { StoreSwitch } from "../StoreSwitch.sol";
import { StoreCore } from "../StoreCore.sol";
import { SchemaType } from "../Types.sol";
import { Bytes } from "../Bytes.sol";
import { SliceLib } from "../Slice.sol";
import { EncodeArray } from "../tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "../Schema.sol";
import { PackedCounter, PackedCounterLib } from "../PackedCounter.sol";

uint256 constant _tableId = uint256(keccak256("/tables/MyConfig"));
uint256 constant MyConfigTableId = _tableId;

struct MyConfigData {
  bool isPaused;
  uint32 value2;
  bytes someBlob;
  uint256[] someNumbers;
}

library MyConfig {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.BOOL;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.BYTES;
    _schema[3] = SchemaType.UINT256_ARRAY;

    return SchemaLib.encode(_schema);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema());
  }

  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema());
  }

  function setIsPaused(bool isPaused) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked(isPaused));
  }

  function setValue2(uint32 value2) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked(value2));
  }

  function setSomeBlob(bytes memory someBlob) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 2, bytes(someBlob));
  }

  function setSomeNumbers(uint256[] memory someNumbers) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 3, EncodeArray.encode(someNumbers));
  }

  function getIsPaused() internal view returns (bool isPaused) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return _toBool(uint8(Bytes.slice1(_blob, 0)));
  }

  function getValue2() internal view returns (uint32 value2) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return uint32(Bytes.slice4(_blob, 0));
  }

  function getSomeBlob() internal view returns (bytes memory someBlob) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return bytes(_blob);
  }

  function getSomeNumbers() internal view returns (uint256[] memory someNumbers) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256();
  }

  /** Set the table's data */
  function set(
    bool isPaused,
    uint32 value2,
    bytes memory someBlob,
    uint256[] memory someNumbers
  ) internal {
    uint16[] memory _counters = new uint16[](2);
    _counters[0] = uint16(bytes(someBlob).length);
    _counters[1] = uint16(someNumbers.length * 32);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    bytes memory _data = abi.encodePacked(
      isPaused,
      value2,
      _encodedLengths.unwrap(),
      bytes(someBlob),
      EncodeArray.encode(someNumbers)
    );

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  function set(MyConfigData memory _table) internal {
    set(_table.isPaused, _table.value2, _table.someBlob, _table.someNumbers);
  }

  /** Get the table's data */
  function get() internal view returns (MyConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  function get(IStore _store) internal view returns (MyConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple);
    return decode(_blob);
  }

  function decode(bytes memory _blob) internal view returns (MyConfigData memory _table) {
    // 5 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 5));

    _table.isPaused = _toBool(uint8(Bytes.slice1(_blob, 0)));

    _table.value2 = uint32(Bytes.slice4(_blob, 1));

    uint256 _start;
    uint256 _end = 37;

    _start = _end;
    _end += _encodedLengths.atIndex(0);
    _table.someBlob = bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes());

    _start = _end;
    _end += _encodedLengths.atIndex(1);
    _table.someNumbers = SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256();
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
